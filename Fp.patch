
diff --git a/drivers/input/fingerprint/goodix/gf_spi.c b/drivers/input/fingerprint/goodix/gf_spi.c
index 1ddfc98d132b..8dd1978f35a4 100644
--- a/drivers/input/fingerprint/goodix/gf_spi.c
+++ b/drivers/input/fingerprint/goodix/gf_spi.c
@@ -1,6 +1,8 @@
-/*
- * TEE driver for goodix fingerprint sensor
- * Copyright (C) 2016 Goodix
+/*Simple synchronous userspace interface to SPI devices
+ *
+ * Copyright (C) 2006 SWAPP
+ *     Andrea Paterniani <a.paterniani@swapp-eng.it>
+ * Copyright (C) 2007 David Brownell (simplification, cleanup)
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -11,9 +13,11 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  */
-#define pr_fmt(fmt)		KBUILD_MODNAME ": " fmt
-
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/ioctl.h>
@@ -28,7 +32,7 @@
 #include <linux/slab.h>
 #include <linux/compat.h>
 #include <linux/delay.h>
-#include <linux/uaccess.h>
+#include <asm/uaccess.h>
 #include <linux/ktime.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
@@ -50,58 +54,56 @@
 #include <linux/platform_device.h>
 #endif
 
-/* modified by zhongshengbin for fingerprint D1S-634 begin 2018-03-04 */
 #define WAKELOCK_HOLD_TIME 2000 /* in ms */
 #define FP_UNLOCK_REJECTION_TIMEOUT (WAKELOCK_HOLD_TIME - 500)
-/* modified by zhongshengbin for fingerprint D1S-634 end 2018-03-04 */
-
-#define VER_MAJOR   1
-#define VER_MINOR   2
-#define PATCH_LEVEL 11
-
-/* #define WAKELOCK_HOLD_TIME 500 // in ms */
 
 #define GF_SPIDEV_NAME     "goodix,fingerprint"
 /*device name after register in charater*/
 #define GF_DEV_NAME            "goodix_fp"
-#define	GF_INPUT_NAME	    "uinput-goodix"	/*"goodix_fp" */
+#define	GF_INPUT_NAME	   "gf3208"	/*"goodix_fp" */
 
 #define	CHRD_DRIVER_NAME	"goodix_fp_spi"
-#define	CLASS_NAME		    "goodix_fp"
-
+#define	CLASS_NAME		   "goodix_fp"
+#define SPIDEV_MAJOR		225	/* assigned */
 #define N_SPI_MINORS		32	/* ... up to 256 */
-static int SPIDEV_MAJOR;
 
+#define GF_INPUT_HOME_KEY KEY_HOMEPAGE /* KEY_HOME */
+#define GF_INPUT_MENU_KEY  KEY_MENU
+#define GF_INPUT_BACK_KEY  KEY_BACK
+#define GF_INPUT_FF_KEY  KEY_POWER
+#define GF_INPUT_CAMERA_KEY  KEY_CAMERA
+#define GF_INPUT_OTHER_KEY KEY_VOLUMEDOWN  /* temporary key value for capture use */
+#define GF_NAV_UP_KEY  KEY_GESTURE_NAV_UP
+#define GF_NAV_DOWN_KEY  KEY_GESTURE_NAV_DOWN
+#define GF_NAV_LEFT_KEY  KEY_GESTURE_NAV_LEFT
+#define GF_NAV_RIGHT_KEY  KEY_GESTURE_NAV_RIGHT
+
+#define GF_CLICK_KEY  114
+#define GF_DOUBLE_CLICK_KEY  115
+#define GF_LONG_PRESS_KEY  217
+
+struct gf_key_map key_map[] = { { "POWER", KEY_POWER }, { "HOME", KEY_HOME }, {
+		"MENU", KEY_MENU }, { "BACK", KEY_BACK }, { "UP", KEY_UP }, { "DOWN",
+KEY_DOWN }, { "LEFT", KEY_LEFT }, { "RIGHT", KEY_RIGHT }, { "FORCE",
+KEY_F9 }, { "CLICK", KEY_F19 }, };
+
+/**************************debug******************************/
+/*Global variables*/
+/*static MODE g_mode = GF_IMAGE_MODE;*/
 static DECLARE_BITMAP(minors, N_SPI_MINORS);
 static LIST_HEAD(device_list);
 static DEFINE_MUTEX(device_list_lock);
-static struct wakeup_source fp_wakelock;
 static struct gf_dev gf;
-
-static struct gf_key_map maps[] = {
-	{ EV_KEY, GF_KEY_INPUT_HOME },
-	{ EV_KEY, GF_KEY_INPUT_MENU },
-	{ EV_KEY, GF_KEY_INPUT_BACK },
-	{ EV_KEY, GF_KEY_INPUT_POWER },
-#if defined(SUPPORT_NAV_EVENT)
-	{ EV_KEY, GF_NAV_INPUT_UP },
-	{ EV_KEY, GF_NAV_INPUT_DOWN },
-	{ EV_KEY, GF_NAV_INPUT_RIGHT },
-	{ EV_KEY, GF_NAV_INPUT_LEFT },
-	{ EV_KEY, GF_KEY_INPUT_CAMERA },
-	{ EV_KEY, GF_NAV_INPUT_CLICK },
-	{ EV_KEY, GF_NAV_INPUT_DOUBLE_CLICK },
-	{ EV_KEY, GF_NAV_INPUT_LONG_PRESS },
-	{ EV_KEY, GF_NAV_INPUT_HEAVY },
-#endif
-};
+static struct wakeup_source fp_wakelock;
+static int driver_init_partial(struct gf_dev *gf_dev);
+static void nav_event_input(struct gf_dev *gf_dev, gf_nav_event_t nav_event);
 
 static void gf_enable_irq(struct gf_dev *gf_dev)
 {
 	if (gf_dev->irq_enabled) {
 		pr_warn("IRQ has been enabled.\n");
 	} else {
-		enable_irq(gf_dev->irq);
+		enable_irq_wake(gf_dev->irq);
 		gf_dev->irq_enabled = 1;
 	}
 }
@@ -110,7 +112,7 @@ static void gf_disable_irq(struct gf_dev *gf_dev)
 {
 	if (gf_dev->irq_enabled) {
 		gf_dev->irq_enabled = 0;
-		disable_irq(gf_dev->irq);
+		disable_irq_wake(gf_dev->irq);
 	} else {
 		pr_warn("IRQ has been disabled.\n");
 	}
@@ -162,8 +164,8 @@ static void spi_clock_set(struct gf_dev *gf_dev, int speed)
 
 	rate = spi_clk_max_rate(gf_dev->core_clk, speed);
 	if (rate < 0) {
-		pr_info("%s: no match found for requested clock frequency:%d",
-				__func__, speed);
+		pr_info("%s: no match found for requested clock frequency:%d", __func__,
+				speed);
 		return;
 	}
 
@@ -252,303 +254,324 @@ static int gfspi_ioctl_clk_uninit(struct gf_dev *data)
 }
 #endif
 
-static void nav_event_input(struct gf_dev *gf_dev, gf_nav_event_t nav_event)
-{
-	uint32_t nav_input = 0;
-
-	switch (nav_event) {
-	case GF_NAV_FINGER_DOWN:
-		pr_debug("%s nav finger down\n", __func__);
-		break;
-
-	case GF_NAV_FINGER_UP:
-		pr_debug("%s nav finger up\n", __func__);
-		break;
-
-	case GF_NAV_DOWN:
-		nav_input = GF_NAV_INPUT_DOWN;
-		pr_debug("%s nav down\n", __func__);
-		break;
-
-	case GF_NAV_UP:
-		nav_input = GF_NAV_INPUT_UP;
-		pr_debug("%s nav up\n", __func__);
-		break;
-
-	case GF_NAV_LEFT:
-		nav_input = GF_NAV_INPUT_LEFT;
-		pr_debug("%s nav left\n", __func__);
-		break;
-
-	case GF_NAV_RIGHT:
-		nav_input = GF_NAV_INPUT_RIGHT;
-		pr_debug("%s nav right\n", __func__);
-		break;
-
-	case GF_NAV_CLICK:
-		nav_input = GF_NAV_INPUT_CLICK;
-		pr_debug("%s nav click\n", __func__);
-		break;
-
-	case GF_NAV_HEAVY:
-		nav_input = GF_NAV_INPUT_HEAVY;
-		pr_debug("%s nav heavy\n", __func__);
-		break;
-
-	case GF_NAV_LONG_PRESS:
-		nav_input = GF_NAV_INPUT_LONG_PRESS;
-		pr_debug("%s nav long press\n", __func__);
-		break;
-
-	case GF_NAV_DOUBLE_CLICK:
-		nav_input = GF_NAV_INPUT_DOUBLE_CLICK;
-		pr_debug("%s nav double click\n", __func__);
-		break;
-
-	default:
-		pr_warn("%s unknown nav event: %d\n", __func__, nav_event);
-		break;
-	}
-
-	if ((nav_event != GF_NAV_FINGER_DOWN) &&
-			(nav_event != GF_NAV_FINGER_UP)) {
-		input_report_key(gf_dev->input, nav_input, 1);
-		input_sync(gf_dev->input);
-		input_report_key(gf_dev->input, nav_input, 0);
-		input_sync(gf_dev->input);
-	}
-}
-
-static irqreturn_t gf_irq(int irq, void *handle)
-{
-#if defined(GF_NETLINK_ENABLE)
-    struct gf_dev *gf_dev = &gf;    /* add by zhongshengbin for fingerprint D1S-634  2018-03-04 */
-	char msg = GF_NET_EVENT_IRQ;
-
-	__pm_wakeup_event(&fp_wakelock, WAKELOCK_HOLD_TIME);
-
-	sendnlmsg(&msg);
-
-    /* add by zhongshengbin for fingerprint D1S-634 begin 2018-03-04 */
-	if ((gf_dev->wait_finger_down == true) && (gf_dev->device_available == 1) && (gf_dev->fb_black == 1)) {
-		gf_dev->wait_finger_down = false;
-		schedule_work(&gf_dev->work);
-	}
-	/* add by zhongshengbin for fingerprint D1S-634 end 2018-03-04 */
-
-#elif defined(GF_FASYNC)
-	struct gf_dev *gf_dev = &gf;
-
-	if (gf_dev->async)
-		kill_fasync(&gf_dev->async, SIGIO, POLL_IN);
-#endif
-
-	return IRQ_HANDLED;
-}
-
-static int irq_setup(struct gf_dev *gf_dev)
-{
-	int status;
-
-	gf_dev->irq = gf_irq_num(gf_dev);
-	status = request_threaded_irq(gf_dev->irq, NULL, gf_irq,
-			IRQF_TRIGGER_RISING | IRQF_ONESHOT,
-			"gf", gf_dev);
-
-	if (status) {
-		pr_err("failed to request IRQ:%d\n", gf_dev->irq);
-		return status;
-	}
-	enable_irq_wake(gf_dev->irq);
-	gf_dev->irq_enabled = 1;
-
-	return status;
-}
-
-static void irq_cleanup(struct gf_dev *gf_dev)
-{
-	gf_dev->irq_enabled = 0;
-	disable_irq(gf_dev->irq);
-	disable_irq_wake(gf_dev->irq);
-	free_irq(gf_dev->irq, gf_dev);
-}
-
-static void gf_kernel_key_input(struct gf_dev *gf_dev, struct gf_key *gf_key)
-{
-	uint32_t key_input = 0;
-
-	if (gf_key->key == GF_KEY_HOME) {
-		key_input = GF_KEY_INPUT_HOME;
-	} else if (gf_key->key == GF_KEY_POWER) {
-		key_input = GF_KEY_INPUT_POWER;
-	} else if (gf_key->key == GF_KEY_CAMERA) {
-		key_input = GF_KEY_INPUT_CAMERA;
-	} else {
-		/* add special key define */
-		key_input = gf_key->key;
-	}
-	pr_info("%s: received key event[%d], key=%d, value=%d\n",
-			__func__, key_input, gf_key->key, gf_key->value);
-
-	if ((GF_KEY_POWER == gf_key->key || GF_KEY_CAMERA == gf_key->key)
-			&& (gf_key->value == 1)) {
-		input_report_key(gf_dev->input, key_input, 1);
-		input_sync(gf_dev->input);
-		input_report_key(gf_dev->input, key_input, 0);
-		input_sync(gf_dev->input);
-	}
-
-	if (gf_key->key == GF_KEY_HOME) {
-		input_report_key(gf_dev->input, key_input, gf_key->value);
-		input_sync(gf_dev->input);
-	}
-}
-
 static long gf_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	struct gf_dev *gf_dev = &gf;
 	struct gf_key gf_key;
-#if defined(SUPPORT_NAV_EVENT)
-	gf_nav_event_t nav_event = GF_NAV_NONE;
-#endif
 	int retval = 0;
+
 	u8 netlink_route = NETLINK_TEST;
 	struct gf_ioc_chip_info info;
+	uint32_t key_event;
+
+#if defined(SUPPORT_NAV_EVENT)
+	gf_nav_event_t nav_event = GF_NAV_NONE;
+#endif
 
 	if (_IOC_TYPE(cmd) != GF_IOC_MAGIC)
 		return -ENODEV;
 
 	if (_IOC_DIR(cmd) & _IOC_READ)
-		retval = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));
-	else if (_IOC_DIR(cmd) & _IOC_WRITE)
-		retval = !access_ok(VERIFY_READ, (void __user *)arg, _IOC_SIZE(cmd));
+		retval = !access_ok(VERIFY_WRITE, (void __user *) arg, _IOC_SIZE(cmd));
+	if ((retval == 0) && (_IOC_DIR(cmd) & _IOC_WRITE))
+		retval = !access_ok(VERIFY_READ, (void __user *) arg, _IOC_SIZE(cmd));
 	if (retval)
 		return -EFAULT;
 
+	if (gf_dev->device_available == 0) {
+		if ((cmd == GF_IOC_ENABLE_POWER) || (cmd == GF_IOC_DISABLE_POWER)) {
+			pr_info("power cmd\n");
+		} else {
+			pr_info("Sensor is power off currently. \n");
+			return -ENODEV;
+		}
+	}
+
 	switch (cmd) {
 	case GF_IOC_INIT:
-		pr_debug("%s GF_IOC_INIT\n", __func__);
-		if (copy_to_user((void __user *)arg, (void *)&netlink_route, sizeof(u8))) {
-			pr_err("GF_IOC_INIT failed\n");
+		pr_info("%s GF_IOC_INIT .\n", __func__);
+		if (copy_to_user((void __user *) arg, (void *) &netlink_route,
+				sizeof(u8))) {
 			retval = -EFAULT;
 			break;
 		}
 		break;
-
 	case GF_IOC_EXIT:
-		pr_debug("%s GF_IOC_EXIT\n", __func__);
+		pr_info("%s GF_IOC_EXIT .\n", __func__);
 		break;
-
 	case GF_IOC_DISABLE_IRQ:
-		pr_debug("%s GF_IOC_DISABEL_IRQ\n", __func__);
+		pr_info("%s GF_IOC_DISABEL_IRQ .\n", __func__);
 		gf_disable_irq(gf_dev);
 		break;
-
 	case GF_IOC_ENABLE_IRQ:
-		pr_debug("%s GF_IOC_ENABLE_IRQ\n", __func__);
+		pr_info("%s GF_IOC_ENABLE_IRQ .\n", __func__);
 		gf_enable_irq(gf_dev);
 		break;
+		pr_info("This kernel doesn't support control clk in AP\n");
 
+		break;
 	case GF_IOC_RESET:
-		pr_debug("%s GF_IOC_RESET\n", __func__);
+		pr_info("%s GF_IOC_RESET. \n", __func__);
 		gf_hw_reset(gf_dev, 3);
 		break;
-
+	case GF_IOC_ENABLE_GPIO:
+		pr_info("%s GF_IOC_ENABLE_GPIO. \n", __func__);
+		driver_init_partial(gf_dev);
+		break;
+	case GF_IOC_RELEASE_GPIO:
+		pr_info("%s GF_IOC_RELEASE_GPIO. \n", __func__);
+		gf_disable_irq(gf_dev);
+		devm_free_irq(&gf_dev->spi->dev, gf_dev->irq, gf_dev);
+		gf_cleanup(gf_dev);
+		break;
 	case GF_IOC_INPUT_KEY_EVENT:
-		if (copy_from_user(&gf_key, (void __user *)arg, sizeof(struct gf_key))) {
-			pr_err("failed to copy input key event from user to kernel\n");
+		pr_info("%s GF_IOC_INPUT_KEY_EVENT. \n", __func__);
+		if (copy_from_user(&gf_key, (struct gf_key *) arg,
+				sizeof(struct gf_key))) {
+			pr_info("Failed to copy input key event from user to kernel\n");
 			retval = -EFAULT;
 			break;
 		}
 
-		gf_kernel_key_input(gf_dev, &gf_key);
-		break;
-
-#if defined(SUPPORT_NAV_EVENT)
-	case GF_IOC_NAV_EVENT:
-		pr_debug("%s GF_IOC_NAV_EVENT\n", __func__);
-		if (copy_from_user(&nav_event, (void __user *)arg, sizeof(gf_nav_event_t))) {
-			pr_err("failed to copy nav event from user to kernel\n");
-			retval = -EFAULT;
-			break;
+		if (GF_KEY_HOME == gf_key.key) {
+			key_event = KEY_SELECT;
+		} else if (GF_KEY_POWER == gf_key.key) {
+			key_event = GF_INPUT_FF_KEY;
+		} else if (GF_KEY_CAPTURE == gf_key.key) {
+			key_event = GF_INPUT_CAMERA_KEY;
+		} else if (GF_KEY_LONG_PRESS == gf_key.key) {
+			key_event = GF_LONG_PRESS_KEY;
+		} else if (GF_KEY_DOUBLE_TAP == gf_key.key) {
+			key_event = GF_DOUBLE_CLICK_KEY;
+		} else if (GF_KEY_TAP == gf_key.key) {
+			key_event = GF_CLICK_KEY;
+		} else {
+			/* add special key define */
+			key_event = gf_key.key;
+		}
+		pr_info("%s: received key event[%d], key=%d, value=%d\n", __func__,
+				key_event, gf_key.key, gf_key.value);
+
+		if ((GF_KEY_POWER == gf_key.key || GF_KEY_CAPTURE == gf_key.key)
+				&& (gf_key.value == 1)) {
+			input_report_key(gf_dev->input, key_event, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, key_event, 0);
+			input_sync(gf_dev->input);
+		} else if (GF_KEY_UP == gf_key.key) {
+			input_report_key(gf_dev->input, GF_NAV_UP_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_UP_KEY, 0);
+			input_sync(gf_dev->input);
+		} else if (GF_KEY_DOWN == gf_key.key) {
+			input_report_key(gf_dev->input, GF_NAV_DOWN_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_DOWN_KEY, 0);
+			input_sync(gf_dev->input);
+		} else if (GF_KEY_RIGHT == gf_key.key) {
+			input_report_key(gf_dev->input, GF_NAV_RIGHT_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_RIGHT_KEY, 0);
+			input_sync(gf_dev->input);
+		} else if (GF_KEY_LEFT == gf_key.key) {
+			input_report_key(gf_dev->input, GF_NAV_LEFT_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_LEFT_KEY, 0);
+			input_sync(gf_dev->input);
+		} else if ((GF_KEY_POWER != gf_key.key)
+				&& (GF_KEY_CAPTURE != gf_key.key)) {
+			input_report_key(gf_dev->input, key_event, gf_key.value);
+			input_sync(gf_dev->input);
 		}
-
-		nav_event_input(gf_dev, nav_event);
 		break;
-#endif
-
 	case GF_IOC_ENABLE_SPI_CLK:
-		pr_debug("%s GF_IOC_ENABLE_SPI_CLK\n", __func__);
+
+
 #ifdef AP_CONTROL_CLK
 		gfspi_ioctl_clk_enable(gf_dev);
 #else
-		pr_debug("doesn't support control clock!\n");
+
+
 #endif
 		break;
-
 	case GF_IOC_DISABLE_SPI_CLK:
-		pr_debug("%s GF_IOC_DISABLE_SPI_CLK\n", __func__);
+
+
 #ifdef AP_CONTROL_CLK
 		gfspi_ioctl_clk_disable(gf_dev);
 #else
-		pr_debug("doesn't support control clock!\n");
+
+
 #endif
 		break;
-
 	case GF_IOC_ENABLE_POWER:
-		pr_debug("%s GF_IOC_ENABLE_POWER\n", __func__);
-		gf_power_on(gf_dev);
+		pr_info("%s GF_IOC_ENABLE_POWER. \n", __func__);
+		if (gf_dev->device_available == 1)
+			pr_info("Sensor has already powered-on.\n");
+		else
+			gf_power_on(gf_dev);
+		gf_dev->device_available = 1;
 		break;
-
 	case GF_IOC_DISABLE_POWER:
-		pr_debug("%s GF_IOC_DISABLE_POWER\n", __func__);
-		gf_power_off(gf_dev);
+		pr_info("%s GF_IOC_DISABLE_POWER. \n", __func__);
+		if (gf_dev->device_available == 0)
+			pr_info("Sensor has already powered-off.\n");
+		else
+			gf_power_off(gf_dev);
+		gf_dev->device_available = 0;
 		break;
-
 	case GF_IOC_ENTER_SLEEP_MODE:
-		pr_debug("%s GF_IOC_ENTER_SLEEP_MODE\n", __func__);
+		pr_info("%s GF_IOC_ENTER_SLEEP_MODE. \n", __func__);
 		break;
-
 	case GF_IOC_GET_FW_INFO:
-		pr_debug("%s GF_IOC_GET_FW_INFO\n", __func__);
+		pr_info("%s GF_IOC_GET_FW_INFO. \n", __func__);
 		break;
-
 	case GF_IOC_REMOVE:
-		pr_debug("%s GF_IOC_REMOVE\n", __func__);
-		irq_cleanup(gf_dev);
-		gf_cleanup(gf_dev);
+		pr_info("%s GF_IOC_REMOVE. \n", __func__);
 		break;
-
 	case GF_IOC_CHIP_INFO:
-		pr_debug("%s GF_IOC_CHIP_INFO\n", __func__);
-		if (copy_from_user(&info, (void __user *)arg, sizeof(struct gf_ioc_chip_info))) {
+		pr_info("%s GF_IOC_CHIP_INFO. \n", __func__);
+		if (copy_from_user(&info, (struct gf_ioc_chip_info *) arg,
+				sizeof(struct gf_ioc_chip_info))) {
 			retval = -EFAULT;
 			break;
 		}
-		pr_info("vendor_id : 0x%x\n", info.vendor_id);
-		pr_info("mode : 0x%x\n", info.mode);
-		pr_info("operation: 0x%x\n", info.operation);
+		pr_info(" vendor_id : 0x%x \n", info.vendor_id);
+		pr_info(" mode : 0x%x \n", info.mode);
+		pr_info(" operation: 0x%x \n", info.operation);
 		break;
 
+#if defined(SUPPORT_NAV_EVENT)
+	case GF_IOC_NAV_EVENT:
+		pr_debug("%s GF_IOC_NAV_EVENT\n", __func__);
+		if (copy_from_user(&nav_event, (gf_nav_event_t *)arg, sizeof(gf_nav_event_t))) {
+			pr_info("Failed to copy nav event from user to kernel\n");
+			retval = -EFAULT;
+			break;
+		}
+
+		nav_event_input(gf_dev, nav_event);
+		break;
+#endif
+
 	default:
-		pr_warn("unsupport cmd:0x%x\n", cmd);
+		pr_info("Unsupport cmd:0x%x \n", cmd);
 		break;
 	}
 
 	return retval;
 }
 
+static void nav_event_input(struct gf_dev *gf_dev, gf_nav_event_t nav_event)
+{
+	uint32_t nav_input = 0;
+
+	switch (nav_event) {
+	case GF_NAV_FINGER_DOWN:
+		pr_debug("%s nav finger down\n", __func__);
+		break;
+
+	case GF_NAV_FINGER_UP:
+
+		pr_debug("%s nav finger up\n", __func__);
+		break;
+
+	case GF_NAV_DOWN:
+			input_report_key(gf_dev->input, GF_NAV_UP_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_UP_KEY, 0);
+			input_sync(gf_dev->input);
+		pr_debug("%s nav up\n", __func__);
+		break;
+
+	case GF_NAV_UP:
+		input_report_key(gf_dev->input, GF_NAV_DOWN_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_DOWN_KEY, 0);
+			input_sync(gf_dev->input);
+		pr_debug("%s nav down\n", __func__);
+		break;
+
+	case GF_NAV_LEFT:
+		input_report_key(gf_dev->input, GF_NAV_RIGHT_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_RIGHT_KEY, 0);
+			input_sync(gf_dev->input);
+		pr_debug("%s nav right\n", __func__);
+		break;
+
+	case GF_NAV_RIGHT:
+		input_report_key(gf_dev->input, GF_NAV_LEFT_KEY, 1);
+			input_sync(gf_dev->input);
+			input_report_key(gf_dev->input, GF_NAV_LEFT_KEY, 0);
+			input_sync(gf_dev->input);
+		pr_debug("%s nav left\n", __func__);
+		break;
+
+	case GF_NAV_CLICK:
+
+		pr_debug("%s nav click\n", __func__);
+		break;
+
+	case GF_NAV_HEAVY:
+		nav_input = GF_NAV_INPUT_HEAVY;
+		pr_debug("%s nav heavy\n", __func__);
+		break;
+
+	case GF_NAV_LONG_PRESS:
+		nav_input = GF_NAV_INPUT_LONG_PRESS;
+		pr_debug("%s nav long press\n", __func__);
+		break;
+
+	case GF_NAV_DOUBLE_CLICK:
+		nav_input = GF_NAV_INPUT_DOUBLE_CLICK;
+		pr_debug("%s nav double click\n", __func__);
+		break;
+
+	default:
+		pr_warn("%s unknown nav event: %d\n", __func__, nav_event);
+		break;
+	}
+
+}
+
 #ifdef CONFIG_COMPAT
-static long gf_compat_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
+static long
+gf_compat_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
 	return gf_ioctl(filp, cmd, (unsigned long)compat_ptr(arg));
 }
 #endif /*CONFIG_COMPAT*/
 
+static void notification_work(struct work_struct *work)
+{
+	mdss_prim_panel_fb_unblank(FP_UNLOCK_REJECTION_TIMEOUT);
+	pr_debug("unblank\n");
+}
 
-static int gf_open(struct inode *inode, struct file *filp)
+static irqreturn_t gf_irq(int irq, void *handle)
 {
+#if defined(GF_NETLINK_ENABLE)
 	struct gf_dev *gf_dev = &gf;
+	char temp = GF_NET_EVENT_IRQ;
+	__pm_wakeup_event(&fp_wakelock, WAKELOCK_HOLD_TIME);
+	sendnlmsg(&temp);
+	if ((gf_dev->wait_finger_down == true) && (gf_dev->device_available == 1) && (gf_dev->fb_black == 1)) {
+		gf_dev->wait_finger_down = false;
+		schedule_work(&gf_dev->work);
+	}
+#elif defined (GF_FASYNC)
+	struct gf_dev *gf_dev = &gf;
+	if (gf_dev->async)
+	kill_fasync(&gf_dev->async, SIGIO, POLL_IN);
+#endif
+
+	return IRQ_HANDLED;
+}
+
+static int gf_open(struct inode *inode, struct file *filp)
+{
+	struct gf_dev *gf_dev;
 	int status = -ENXIO;
 
 	mutex_lock(&device_list_lock);
@@ -566,29 +589,13 @@ static int gf_open(struct inode *inode, struct file *filp)
 			gf_dev->users++;
 			filp->private_data = gf_dev;
 			nonseekable_open(inode, filp);
-			pr_info("Succeed to open device. irq = %d\n",
-					gf_dev->irq);
-			if (gf_dev->users == 1) {
-				status = gf_parse_dts(gf_dev);
-				if (status)
-					goto err_parse_dt;
-
-				status = irq_setup(gf_dev);
-				if (status)
-					goto err_irq;
-			}
-			gf_hw_reset(gf_dev, 3);
+			pr_info("Succeed to open device. irq = %d\n", gf_dev->irq);
 			gf_dev->device_available = 1;
 		}
 	} else {
 		pr_info("No device for minor %d\n", iminor(inode));
 	}
 	mutex_unlock(&device_list_lock);
-
-	return status;
-err_irq:
-	gf_cleanup(gf_dev);
-err_parse_dt:
 	return status;
 }
 
@@ -606,7 +613,7 @@ static int gf_fasync(int fd, struct file *filp, int mode)
 
 static int gf_release(struct inode *inode, struct file *filp)
 {
-	struct gf_dev *gf_dev = &gf;
+	struct gf_dev *gf_dev;
 	int status = 0;
 
 	mutex_lock(&device_list_lock);
@@ -617,11 +624,11 @@ static int gf_release(struct inode *inode, struct file *filp)
 	gf_dev->users--;
 	if (!gf_dev->users) {
 
+
 		pr_info("disble_irq. irq = %d\n", gf_dev->irq);
-		/* gf_disable_irq(gf_dev); */
-		irq_cleanup(gf_dev);
-		gf_cleanup(gf_dev);
-		/*power off the sensor*/
+		gf_disable_irq(gf_dev);
+
+		devm_free_irq(&gf_dev->spi->dev, gf_dev->irq, gf_dev);
 		gf_dev->device_available = 0;
 		gf_power_off(gf_dev);
 	}
@@ -629,65 +636,66 @@ static int gf_release(struct inode *inode, struct file *filp)
 	return status;
 }
 
-static const struct file_operations gf_fops = {
-	.owner = THIS_MODULE,
-	/* REVISIT switch to aio primitives, so that userspace
-	 * gets more complete API coverage.  It'll simplify things
-	 * too, except for the locking.
-	 */
-	.unlocked_ioctl = gf_ioctl,
+static const struct file_operations gf_fops = { .owner = THIS_MODULE,
+/* REVISIT switch to aio primitives, so that userspace
+ * gets more complete API coverage.  It'll simplify things
+ * too, except for the locking.
+ */
+.unlocked_ioctl = gf_ioctl,
 #ifdef CONFIG_COMPAT
-	.compat_ioctl = gf_compat_ioctl,
+		.compat_ioctl = gf_compat_ioctl,
 #endif /*CONFIG_COMPAT*/
-	.open = gf_open,
-	.release = gf_release,
+		.open = gf_open, .release = gf_release,
 #ifdef GF_FASYNC
-	.fasync = gf_fasync,
+		.fasync = gf_fasync,
 #endif
-};
+	};
 
 static int goodix_fb_state_chg_callback(struct notifier_block *nb,
-		unsigned long val, void *data)
-{
+		unsigned long val, void *data) {
 	struct gf_dev *gf_dev;
 	struct fb_event *evdata = data;
 	unsigned int blank;
-	char msg = 0;
+	char temp = 0;
 
-	/* if (val != FB_EARLY_EVENT_BLANK) */
 	if (val != FB_EVENT_BLANK)
 		return 0;
-	pr_debug("[info] %s go to the goodix_fb_state_chg_callback value = %d\n",
-			__func__, (int)val);
+
 	gf_dev = container_of(nb, struct gf_dev, notifier);
-	/* modified by zhongshengbin for fingerprint D1S-634 begin 2018-03-04 */
-	/* if (evdata && evdata->data && val == FB_EARLY_EVENT_BLANK && gf_dev) { */
 	if (evdata && evdata->data && val == FB_EVENT_BLANK && gf_dev) {
-		blank = *(int *)(evdata->data);
+		blank = *(int *) (evdata->data);
 		switch (blank) {
 		case FB_BLANK_POWERDOWN:
 			if (gf_dev->device_available == 1) {
 				gf_dev->fb_black = 1;
-				gf_dev->wait_finger_down = true;  /* add  for D1S-634 by zhongshengbin */
+				gf_dev->wait_finger_down = true;
 #if defined(GF_NETLINK_ENABLE)
-				msg = GF_NET_EVENT_FB_BLACK;
-				/* sendnlmsg(&msg); */
-#elif defined(GF_FASYNC)
-				if (gf_dev->async)
-					kill_fasync(&gf_dev->async, SIGIO, POLL_IN);
+				temp = GF_NET_EVENT_FB_BLACK;
+				sendnlmsg(&temp);
+#elif defined (GF_FASYNC)
+				if (gf_dev->async) {
+					kill_fasync(&gf_dev->async, SIGIO,
+							POLL_IN);
+				}
 #endif
+				/*device unavailable */
+
 			}
 			break;
 		case FB_BLANK_UNBLANK:
 			if (gf_dev->device_available == 1) {
 				gf_dev->fb_black = 0;
 #if defined(GF_NETLINK_ENABLE)
-				msg = GF_NET_EVENT_FB_UNBLACK;
-				/* sendnlmsg(&msg); */
-#elif defined(GF_FASYNC)
-				if (gf_dev->async)
-					kill_fasync(&gf_dev->async, SIGIO, POLL_IN);
+				temp = GF_NET_EVENT_FB_UNBLACK;
+				sendnlmsg(&temp);
+#elif defined (GF_FASYNC)
+				if (gf_dev->async) {
+					kill_fasync(&gf_dev->async, SIGIO,
+							POLL_IN);
+				}
 #endif
+				/*device available */
+
 			}
 			break;
 		default:
@@ -695,13 +703,77 @@ static int goodix_fb_state_chg_callback(struct notifier_block *nb,
 			break;
 		}
 	}
-	printk("SXF Exit %s\n ", __func__); /* add  for D1S-634 by zhongshengbin */
 	return NOTIFY_OK;
 }
 
-static struct notifier_block goodix_noti_block = {
-	.notifier_call = goodix_fb_state_chg_callback,
-};
+static struct notifier_block goodix_noti_block = { .notifier_call =
+		goodix_fb_state_chg_callback, };
+
+static void gf_reg_key_kernel(struct gf_dev *gf_dev)
+{
+	int i;
+
+	set_bit(EV_KEY, gf_dev->input->evbit);
+	for (i = 0; i < ARRAY_SIZE(key_map); i++) {
+		set_bit(key_map[i].val, gf_dev->input->keybit);
+	}
+
+		set_bit(KEY_SELECT, gf_dev->input->keybit);
+
+	gf_dev->input->name = GF_INPUT_NAME;
+	if (input_register_device(gf_dev->input))
+		pr_warn("Failed to register GF as input device.\n");
+}
+
+static int driver_init_partial(struct gf_dev *gf_dev)
+{
+	int ret = 0;
+
+	pr_warn("--------driver_init_partial start.--------\n");
+
+	gf_dev->device_available = 1;
+
+	if (gf_parse_dts(gf_dev))
+		goto error;
+
+	gf_dev->irq = gf_irq_num(gf_dev);
+	ret = devm_request_threaded_irq(&gf_dev->spi->dev,
+					gf_dev->irq,
+					NULL,
+					gf_irq,
+					IRQF_TRIGGER_RISING | IRQF_ONESHOT,
+					"gf", gf_dev);
+	if (ret) {
+		pr_err("Could not request irq %d\n", gpio_to_irq(gf_dev->irq_gpio));
+		goto error;
+	}
+	if (!ret) {
+
+		gf_enable_irq(gf_dev);
+		gf_disable_irq(gf_dev);
+	}
+
+#if defined (CONFIG_MACH_XIAOMI_SAKURA) || defined (CONFIG_MACH_XIAOMI_DAISY)
+		gf_hw_reset(gf_dev, 3);
+#else
+		gf_hw_reset(gf_dev, 10);
+#endif
+
+	return 0;
+
+error:
+
+	gf_cleanup(gf_dev);
+
+	gf_dev->device_available = 0;
+
+	return -EPERM;
+
+
+}
+
+
+
 
 static struct class *gf_class;
 #if defined(USE_SPI_BUS)
@@ -713,8 +785,9 @@ static int gf_probe(struct platform_device *pdev)
 	struct gf_dev *gf_dev = &gf;
 	int status = -EINVAL;
 	unsigned long minor;
-	int i;
 
+
+	printk("%s %d \n", __func__, __LINE__);
 	/* Initialize the driver data */
 	INIT_LIST_HEAD(&gf_dev->device_entry);
 #if defined(USE_SPI_BUS)
@@ -727,55 +800,66 @@ static int gf_probe(struct platform_device *pdev)
 	gf_dev->pwr_gpio = -EINVAL;
 	gf_dev->device_available = 0;
 	gf_dev->fb_black = 0;
-
-    /* add by zhongshengbin for fingerprint D1S-634 begin 2018-03-04 */
+	gf_dev->irq_enabled = 0;
+#ifdef ENABLE_PINCTRL
+	gf_dev->fingerprint_pinctrl = NULL;
+#endif
 	gf_dev->wait_finger_down = false;
-	/* add by zhongshengbin for fingerprint D1S-634 end 2018-03-04 */
+	INIT_WORK(&gf_dev->work, notification_work);
 
 	/* If we can allocate a minor number, hook up this device.
-	 * Reusing minors is fine so long as udev or mdev is working.
-	 */
+	* Reusing minors is fine so long as udev or mdev is working.
+	*/
 	mutex_lock(&device_list_lock);
 	minor = find_first_zero_bit(minors, N_SPI_MINORS);
 	if (minor < N_SPI_MINORS) {
 		struct device *dev;
 
 		gf_dev->devt = MKDEV(SPIDEV_MAJOR, minor);
-		dev = device_create(gf_class, &gf_dev->spi->dev, gf_dev->devt,
-				gf_dev, GF_DEV_NAME);
+		dev = device_create(gf_class, &gf_dev->spi->dev, gf_dev->devt, gf_dev,
+		GF_DEV_NAME);
 		status = IS_ERR(dev) ? PTR_ERR(dev) : 0;
 	} else {
 		dev_dbg(&gf_dev->spi->dev, "no minor number available!\n");
 		status = -ENODEV;
-		mutex_unlock(&device_list_lock);
-		goto error_hw;
 	}
 
+
 	if (status == 0) {
 		set_bit(minor, minors);
 		list_add(&gf_dev->device_entry, &device_list);
 	} else {
 		gf_dev->devt = 0;
-		goto error_hw;
 	}
 	mutex_unlock(&device_list_lock);
 
-	gf_dev->input = input_allocate_device();
-	if (gf_dev->input == NULL) {
-		pr_err("%s, failed to allocate input device\n", __func__);
-		status = -ENOMEM;
-		goto error_dev;
-	}
-	for (i = 0; i < ARRAY_SIZE(maps); i++)
-		input_set_capability(gf_dev->input, maps[i].type, maps[i].code);
 
-	gf_dev->input->name = GF_INPUT_NAME;
-	status = input_register_device(gf_dev->input);
-	if (status) {
-		pr_err("failed to register input device\n");
-		goto error_input;
-	}
+	if (status == 0) {
+		/*input device subsystem */
 
+		gf_dev->input = input_allocate_device();
+		if (gf_dev->input == NULL) {
+			pr_info("%s, Failed to allocate input device.\n", __func__);
+			status = -ENOMEM;
+	   goto error;
+		}
+
+		__set_bit(EV_KEY, gf_dev->input->evbit);
+		__set_bit(GF_INPUT_HOME_KEY, gf_dev->input->keybit);
+
+		__set_bit(GF_INPUT_MENU_KEY, gf_dev->input->keybit);
+		__set_bit(GF_INPUT_BACK_KEY, gf_dev->input->keybit);
+		__set_bit(GF_INPUT_FF_KEY, gf_dev->input->keybit);
+
+		__set_bit(GF_NAV_UP_KEY, gf_dev->input->keybit);
+		__set_bit(GF_NAV_DOWN_KEY, gf_dev->input->keybit);
+		__set_bit(GF_NAV_RIGHT_KEY, gf_dev->input->keybit);
+		__set_bit(GF_NAV_LEFT_KEY, gf_dev->input->keybit);
+		__set_bit(GF_INPUT_CAMERA_KEY, gf_dev->input->keybit);
+		__set_bit(GF_CLICK_KEY, gf_dev->input->keybit);
+		__set_bit(GF_DOUBLE_CLICK_KEY, gf_dev->input->keybit);
+		__set_bit(GF_LONG_PRESS_KEY, gf_dev->input->keybit);
+	}
 #ifdef AP_CONTROL_CLK
 	pr_info("Get the clk resource.\n");
 	/* Enable spi clock */
@@ -788,25 +872,19 @@ static int gf_probe(struct platform_device *pdev)
 	spi_clock_set(gf_dev, 1000000);
 #endif
 
+
 	gf_dev->notifier = goodix_noti_block;
 	fb_register_client(&gf_dev->notifier);
+	gf_reg_key_kernel(gf_dev);
 
 	wakeup_source_init(&fp_wakelock, "fp_wakelock");
 
-	pr_info("version V%d.%d.%02d\n", VER_MAJOR, VER_MINOR, PATCH_LEVEL);
-printk("gf probe success\n");
-	return status;
+	printk("%s %d end, status = %d\n", __func__, __LINE__, status);
 
-#ifdef AP_CONTROL_CLK
-gfspi_probe_clk_enable_failed:
-	gfspi_ioctl_clk_uninit(gf_dev);
-gfspi_probe_clk_init_failed:
-#endif
+	return status;
 
-error_input:
-	if (gf_dev->input != NULL)
-		input_free_device(gf_dev->input);
-error_dev:
+	error: gf_cleanup(gf_dev);
+	gf_dev->device_available = 0;
 	if (gf_dev->devt != 0) {
 		pr_info("Err: status = %d\n", status);
 		mutex_lock(&device_list_lock);
@@ -814,9 +892,13 @@ printk("gf probe success\n");
 		device_destroy(gf_class, gf_dev->devt);
 		clear_bit(MINOR(gf_dev->devt), minors);
 		mutex_unlock(&device_list_lock);
+#ifdef AP_CONTROL_CLK
+		gfspi_probe_clk_enable_failed: gfspi_ioctl_clk_uninit(gf_dev);
+		gfspi_probe_clk_init_failed:
+#endif
+		if (gf_dev->input != NULL)
+			input_unregister_device(gf_dev->input);
 	}
-error_hw:
-	gf_dev->device_available = 0;
 
 	return status;
 }
@@ -829,9 +911,11 @@ static int gf_remove(struct platform_device *pdev)
 {
 	struct gf_dev *gf_dev = &gf;
 
-	wakeup_source_trash(&fp_wakelock);
-	fb_unregister_client(&gf_dev->notifier);
-	if (gf_dev->input)
+	/* make sure ops on existing fds can abort cleanly */
+	if (gf_dev->irq)
+		free_irq(gf_dev->irq, gf_dev);
+
+	if (gf_dev->input != NULL)
 		input_unregister_device(gf_dev->input);
 	input_free_device(gf_dev->input);
 
@@ -840,38 +924,58 @@ static int gf_remove(struct platform_device *pdev)
 	list_del(&gf_dev->device_entry);
 	device_destroy(gf_class, gf_dev->devt);
 	clear_bit(MINOR(gf_dev->devt), minors);
+	if (gf_dev->users == 0)
+		gf_cleanup(gf_dev);
+
+	fb_unregister_client(&gf_dev->notifier);
 	mutex_unlock(&device_list_lock);
+        wakeup_source_trash(&fp_wakelock);
+	return 0;
+}
 
+#if defined(USE_SPI_BUS)
+static int gf_suspend(struct spi_device *spi, pm_message_t mesg)
+#elif defined(USE_PLATFORM_BUS)
+static int gf_suspend(struct platform_device *pdev, pm_message_t state)
+#endif
+{
+	pr_info(KERN_ERR "gf_suspend_test.\n");
 	return 0;
 }
 
-static const struct of_device_id gx_match_table[] = {
-	{ .compatible = GF_SPIDEV_NAME },
-	{},
-};
+#if defined(USE_SPI_BUS)
+static int gf_resume(struct spi_device *spi)
+#elif defined(USE_PLATFORM_BUS)
+static int gf_resume(struct platform_device *pdev)
+#endif
+{
+	pr_info(KERN_ERR "gf_resume_test.\n");
+	return 0;
+}
+
+static struct of_device_id gx_match_table[] = {
+		{ .compatible = GF_SPIDEV_NAME, }, { }, };
 
 #if defined(USE_SPI_BUS)
 static struct spi_driver gf_driver = {
 #elif defined(USE_PLATFORM_BUS)
-static struct platform_driver gf_driver = {
+		static struct platform_driver gf_driver = {
 #endif
-	.driver = {
-		.name = GF_DEV_NAME,
-		.owner = THIS_MODULE,
-		.of_match_table = gx_match_table,
-	},
-	.probe = gf_probe,
-	.remove = gf_remove,
-};
+		.driver = { .name = GF_DEV_NAME, .owner = THIS_MODULE,
+#if defined(USE_SPI_BUS)
+
+#endif
+				.of_match_table = gx_match_table, }, .probe = gf_probe,
+		.remove = gf_remove, .suspend = gf_suspend, .resume = gf_resume, };
 
 static int __init gf_init(void)
 {
 	int status;
 
 	/* Claim our 256 reserved device numbers.  Then register a class
-	 * that will key udev/mdev to add/remove /dev nodes.  Last, register
-	 * the driver which manages those device numbers.
-	 */
+	* that will key udev/mdev to add/remove /dev nodes.  Last, register
+	* the driver which manages those device numbers.
+	*/
 
 	BUILD_BUG_ON(N_SPI_MINORS > 256);
 	status = register_chrdev(SPIDEV_MAJOR, CHRD_DRIVER_NAME, &gf_fops);
@@ -879,7 +983,6 @@ static int __init gf_init(void)
 		pr_warn("Failed to register char device!\n");
 		return status;
 	}
-	SPIDEV_MAJOR = status;
 	gf_class = class_create(THIS_MODULE, CLASS_NAME);
 	if (IS_ERR(gf_class)) {
 		unregister_chrdev(SPIDEV_MAJOR, gf_driver.driver.name);
@@ -900,9 +1003,10 @@ static int __init gf_init(void)
 #ifdef GF_NETLINK_ENABLE
 	netlink_init();
 #endif
-	printk("status = 0x%x\n", status);
+	pr_info(" status = 0x%x\n", status);
 	return 0;
 }
+
 module_init(gf_init);
 
 static void __exit gf_exit(void)
@@ -918,9 +1022,10 @@ static void __exit gf_exit(void)
 	class_destroy(gf_class);
 	unregister_chrdev(SPIDEV_MAJOR, gf_driver.driver.name);
 }
+
 module_exit(gf_exit);
 
 MODULE_AUTHOR("Jiangtao Yi, <yijiangtao@goodix.com>");
-MODULE_AUTHOR("Jandy Gou, <gouqingsong@goodix.com>");
-MODULE_DESCRIPTION("goodix fingerprint sensor device driver");
+MODULE_DESCRIPTION("User mode SPI device interface");
 MODULE_LICENSE("GPL");
+MODULE_ALIAS("spi:gf-spi");
\ No newline at end of file
diff --git a/drivers/input/fingerprint/goodix/gf_spi.h b/drivers/input/fingerprint/goodix/gf_spi.h
index fef008b61de6..a4447c90478e 100644
--- a/drivers/input/fingerprint/goodix/gf_spi.h
+++ b/drivers/input/fingerprint/goodix/gf_spi.h
@@ -1,15 +1,10 @@
-/*
- * driver definition for sensor driver
- *
- * Coypright (c) 2017 Goodix
- */
 #ifndef __GF_SPI_H
 #define __GF_SPI_H
 
 #include <linux/types.h>
 #include <linux/notifier.h>
 /**********************************************************/
-enum FP_MODE{
+enum FP_MODE {
 	GF_IMAGE_MODE = 0,
 	GF_KEY_MODE,
 	GF_SLEEP_MODE,
@@ -18,23 +13,13 @@ enum FP_MODE{
 };
 
 #define SUPPORT_NAV_EVENT
-
 #if defined(SUPPORT_NAV_EVENT)
-#define GF_NAV_INPUT_UP			198
-#define GF_NAV_INPUT_DOWN		197
-#define GF_NAV_INPUT_LEFT		195
-#define GF_NAV_INPUT_RIGHT		196
-#define GF_NAV_INPUT_CLICK		KEY_VOLUMEDOWN
+
 #define GF_NAV_INPUT_DOUBLE_CLICK	KEY_VOLUMEUP
 #define GF_NAV_INPUT_LONG_PRESS		KEY_SEARCH
 #define GF_NAV_INPUT_HEAVY		KEY_CHAT
 #endif
 
-#define GF_KEY_INPUT_HOME		KEY_SELECT
-#define GF_KEY_INPUT_MENU		KEY_MENU
-#define GF_KEY_INPUT_BACK		KEY_BACK
-#define GF_KEY_INPUT_POWER		KEY_POWER
-#define GF_KEY_INPUT_CAMERA		KEY_CAMERA
 
 #if defined(SUPPORT_NAV_EVENT)
 typedef enum gf_nav_event {
@@ -58,17 +43,25 @@ typedef enum gf_key_event {
 	GF_KEY_POWER,
 	GF_KEY_MENU,
 	GF_KEY_BACK,
-	GF_KEY_CAMERA,
+	GF_KEY_CAPTURE,
+	GF_KEY_UP,
+	GF_KEY_DOWN,
+	GF_KEY_RIGHT,
+	GF_KEY_LEFT,
+	GF_KEY_TAP,
+	GF_KEY_HEAVY,
+	GF_KEY_LONG_PRESS,
+	GF_KEY_DOUBLE_TAP
 } gf_key_event_t;
 
 struct gf_key {
 	enum gf_key_event key;
-	uint32_t value;   /* key down = 1, key up = 0 */
+	uint32_t value; /* key down = 1, key up = 0 */
 };
 
 struct gf_key_map {
-	unsigned int type;
-	unsigned int code;
+	char *name;
+	unsigned short val;
 };
 
 struct gf_ioc_chip_info {
@@ -78,7 +71,7 @@ struct gf_ioc_chip_info {
 	unsigned char reserved[5];
 };
 
-#define GF_IOC_MAGIC    'g'     /* define magic number */
+#define GF_IOC_MAGIC    'g'
 #define GF_IOC_INIT             _IOR(GF_IOC_MAGIC, 0, uint8_t)
 #define GF_IOC_EXIT             _IO(GF_IOC_MAGIC, 1)
 #define GF_IOC_RESET            _IO(GF_IOC_MAGIC, 2)
@@ -92,7 +85,9 @@ struct gf_ioc_chip_info {
 #define GF_IOC_ENTER_SLEEP_MODE _IO(GF_IOC_MAGIC, 10)
 #define GF_IOC_GET_FW_INFO      _IOR(GF_IOC_MAGIC, 11, uint8_t)
 #define GF_IOC_REMOVE           _IO(GF_IOC_MAGIC, 12)
-#define GF_IOC_CHIP_INFO        _IOW(GF_IOC_MAGIC, 13, struct gf_ioc_chip_info)
+#define GF_IOC_CHIP_INFO        _IOR(GF_IOC_MAGIC, 13, struct gf_ioc_chip_info)
+#define GF_IOC_ENABLE_GPIO  	_IO(GF_IOC_MAGIC, 15)
+#define GF_IOC_RELEASE_GPIO  	_IO(GF_IOC_MAGIC, 16)
 
 #if defined(SUPPORT_NAV_EVENT)
 #define GF_IOC_NAV_EVENT	_IOW(GF_IOC_MAGIC, 14, gf_nav_event_t)
@@ -101,16 +96,26 @@ struct gf_ioc_chip_info {
 #define  GF_IOC_MAXNR    14  /* THIS MACRO IS NOT USED NOW... */
 #endif
 
-/* #define AP_CONTROL_CLK       1 */
+
 #define  USE_PLATFORM_BUS     1
-/* #define  USE_SPI_BUS	1 */
-/* #define GF_FASYNC   1	//If support fasync mechanism. */
+
+
 #define GF_NETLINK_ENABLE 1
 #define GF_NET_EVENT_IRQ 1
 #define GF_NET_EVENT_FB_BLACK 2
 #define GF_NET_EVENT_FB_UNBLACK 3
 #define NETLINK_TEST 25
 
+
+#ifdef ENABLE_PINCTRL
+static const char * const pctl_names[] = {
+
+	"goodixfp_reset_reset",
+	"goodixfp_reset_active",
+	"goodixfp_irq_active",
+};
+#endif
+
 struct gf_dev {
 	dev_t devt;
 	struct list_head device_entry;
@@ -122,6 +127,11 @@ struct gf_dev {
 	struct clk *core_clk;
 	struct clk *iface_clk;
 
+#ifdef ENABLE_PINCTRL
+	struct pinctrl *fingerprint_pinctrl;
+	struct pinctrl_state *pinctrl_state[ARRAY_SIZE(pctl_names)];
+#endif
+
 	struct input_dev *input;
 	/* buffer is NULL unless this device is open (users > 0) */
 	unsigned users;
@@ -137,10 +147,9 @@ struct gf_dev {
 	struct notifier_block notifier;
 	char device_available;
 	char fb_black;
-
-    /* add by zhongshengbin for fingerprint D1S-634 2018-03-04 */
 	char wait_finger_down;
 	struct work_struct work;
+
 };
 
 int gf_parse_dts(struct gf_dev *gf_dev);
@@ -152,7 +161,7 @@ int gf_power_off(struct gf_dev *gf_dev);
 int gf_hw_reset(struct gf_dev *gf_dev, unsigned int delay_ms);
 int gf_irq_num(struct gf_dev *gf_dev);
 
-int sendnlmsg(char *msg);
+void sendnlmsg(char *message);
 int netlink_init(void);
 void netlink_exit(void);
-#endif /*__GF_SPI_H*/
+#endif /*__GF_SPI_H*/
\ No newline at end of file
diff --git a/drivers/input/fingerprint/goodix/netlink.c b/drivers/input/fingerprint/goodix/netlink.c
index a927c9acf863..8afcc36df5de 100644
--- a/drivers/input/fingerprint/goodix/netlink.c
+++ b/drivers/input/fingerprint/goodix/netlink.c
@@ -1,8 +1,3 @@
-/*
- * netlink interface
- *
- * Copyright (c) 2017 Goodix
- */
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/timer.h>
@@ -10,70 +5,78 @@
 #include <linux/types.h>
 #include <net/sock.h>
 #include <net/netlink.h>
-#include "gf_spi.h"
 
 #define NETLINK_TEST 25
 #define MAX_MSGSIZE 32
+int stringlength(char *s);
+void sendnlmsg(char *message);
+int pid;
+int err;
+struct sock *nl_sk = NULL;
+int flag = 0;
 
-static int pid = -1;
-static struct sock *nl_sk;
 
-int sendnlmsg(char *msg)
+struct gf_uk_channel{
+	int channel_id;
+	int reserved;
+	char buf[3*1024];
+	int len;
+};
+
+
+void sendnlmsg(char *message)
 {
-	struct sk_buff *skb;
+	struct sk_buff *skb_1;
 	struct nlmsghdr *nlh;
 	int len = NLMSG_SPACE(MAX_MSGSIZE);
+	int slen = 0;
 	int ret = 0;
-
-	if (!msg || !nl_sk || !pid)
-		return -ENODEV;
-
-	skb = alloc_skb(len, GFP_ATOMIC);
-	if (!skb)
-		return -ENOMEM;
-
-	nlh = nlmsg_put(skb, 0, 0, 0, MAX_MSGSIZE, 0);
-	if (!nlh) {
-		kfree_skb(skb);
-		return -EMSGSIZE;
+	if (!message || !nl_sk || !pid) {
+		return ;
 	}
+	skb_1 = alloc_skb(len, GFP_KERNEL);
+	if (!skb_1) {
+		printk(KERN_ERR "my_net_link:alloc_skb_1 error\n");
+	}
+	slen = strlen(message);
+	nlh = nlmsg_put(skb_1, 0, 0, 0, MAX_MSGSIZE, 0);
+
+	NETLINK_CB(skb_1).portid = 0;
+	NETLINK_CB(skb_1).dst_group = 0;
 
-	NETLINK_CB(skb).portid = 0;
-	NETLINK_CB(skb).dst_group = 0;
+	message[slen] = '\0';
+	memcpy(NLMSG_DATA(nlh), message, slen+1);
 
-	memcpy(NLMSG_DATA(nlh), msg, sizeof(char));
-	pr_debug("send message: %d\n", *(char *)NLMSG_DATA(nlh));
 
-	ret = netlink_unicast(nl_sk, skb, pid, MSG_DONTWAIT);
-	if (ret > 0)
-		ret = 0;
+	ret = netlink_unicast(nl_sk, skb_1, pid, MSG_DONTWAIT);
+	if (!ret) {
 
-	return ret;
+		printk("send msg from kernel to usespace failed ret 0x%x \n", ret);
+	}
 }
 
-static void nl_data_ready(struct sk_buff *__skb)
+void nl_data_ready(struct sk_buff *__skb)
 {
 	struct sk_buff *skb;
 	struct nlmsghdr *nlh;
 	char str[100];
-
-	skb = skb_get(__skb);
+	skb = skb_get (__skb);
 	if (skb->len >= NLMSG_SPACE(0)) {
 		nlh = nlmsg_hdr(skb);
 
 		memcpy(str, NLMSG_DATA(nlh), sizeof(str));
 		pid = nlh->nlmsg_pid;
 
+		if (pid)
+			printk("Message pid %d received:%s\n", pid, str) ;
 		kfree_skb(skb);
 	}
 
 }
 
-
 int netlink_init(void)
 {
 	struct netlink_kernel_cfg netlink_cfg;
-
 	memset(&netlink_cfg, 0, sizeof(struct netlink_kernel_cfg));
 
 	netlink_cfg.groups = 0;
@@ -81,11 +84,12 @@ int netlink_init(void)
 	netlink_cfg.input = nl_data_ready;
 	netlink_cfg.cb_mutex = NULL;
 
+
 	nl_sk = netlink_kernel_create(&init_net, NETLINK_TEST,
 			&netlink_cfg);
 
 	if (!nl_sk) {
-		pr_err("create netlink socket error\n");
+		printk(KERN_ERR "my_net_link: create netlink socket error.\n");
 		return 1;
 	}
 
@@ -99,5 +103,5 @@ void netlink_exit(void)
 		nl_sk = NULL;
 	}
 
-	pr_info("self module exited\n");
+	printk("my_net_link: self module exited\n");
 }
diff --git a/drivers/input/fingerprint/goodix/platform.c b/drivers/input/fingerprint/goodix/platform.c
index 3c5ea4cc44a6..a805976dd5d2 100644
--- a/drivers/input/fingerprint/goodix/platform.c
+++ b/drivers/input/fingerprint/goodix/platform.c
@@ -1,8 +1,3 @@
-/*
- * platform indepent driver interface
- *
- * Coypritht (c) 2017 Goodix
- */
 #include <linux/delay.h>
 #include <linux/workqueue.h>
 #include <linux/of_gpio.h>
@@ -20,86 +15,212 @@
 #include <linux/platform_device.h>
 #endif
 
+#define gf_dbg(fmt, args...) do { \
+					pr_warn("gf:" fmt, ##args);\
+		} while (0)
+
+
+static int gf3208_request_named_gpio(struct gf_dev *gf_dev, const char *label, int *gpio)
+{
+	struct device *dev = &gf_dev->spi->dev;
+	struct device_node *np = dev->of_node;
+	int rc = of_get_named_gpio(np, label, 0);
+	if (rc < 0) {
+		dev_err(dev, "failed to get '%s'\n", label);
+		return rc;
+	}
+	*gpio = rc;
+	rc = devm_gpio_request(dev, *gpio, label);
+	if (rc) {
+		dev_err(dev, "failed to request gpio %d\n", *gpio);
+		return rc;
+	}
+	dev_err(dev, "%s %d\n", label, *gpio);
+	return 0;
+}
+
+#ifdef ENABLE_PINCTRL
+static int select_pin_ctl(struct gf_dev *gf_dev, const char *name)
+{
+	size_t i;
+	int rc;
+	struct device *dev = &gf_dev->spi->dev;
+
+	for (i = 0; i < ARRAY_SIZE(gf_dev->pinctrl_state); i++) {
+		const char *n = pctl_names[i];
+		if (!strncmp(n, name, strlen(n))) {
+			rc = pinctrl_select_state(gf_dev->fingerprint_pinctrl, gf_dev->pinctrl_state[i]);
+
+			if (rc)
+				dev_err(dev, "cannot select '%s'\n", name);
+			else
+				dev_err(dev, "Selected '%s'\n", name);
+			goto exit;
+		}
+	}
+	rc = -EINVAL;
+	dev_err(dev, "%s:'%s' not found\n", __func__, name);
+exit:
+	return rc;
+}
+#endif
+
+
+/*GPIO pins reference.*/
 int gf_parse_dts(struct gf_dev *gf_dev)
 {
 	int rc = 0;
+#ifdef ENABLE_PINCTRL
+	int i = 0;
+#endif
+	pr_warn("--------gf_parse_dts start  haijun.--------\n");
+
+	/*get reset resource*/
+	#if defined (CONFIG_MACH_XIAOMI_SAKURA) || defined (CONFIG_MACH_XIAOMI_DAISY)
 	struct device *dev = &gf_dev->spi->dev;
 	struct device_node *np = dev->of_node;
-
-	gf_dev->reset_gpio = of_get_named_gpio(np, "fp-gpio-reset", 0);
+        gf_dev->reset_gpio = of_get_named_gpio(np, "goodix,gpio_reset", 0);
 	if (gf_dev->reset_gpio < 0) {
 		pr_err("falied to get reset gpio!\n");
 		return gf_dev->reset_gpio;
 	}
-
-	rc = devm_gpio_request(dev, gf_dev->reset_gpio, "goodix_reset");
+	gpio_direction_output(gf_dev->reset_gpio, 1);
+	#else
+	rc = gf3208_request_named_gpio(gf_dev, "goodix,gpio_reset", &gf_dev->reset_gpio);
 	if (rc) {
-		pr_err("failed to request reset gpio, rc = %d\n", rc);
-		goto err_reset;
+		gf_dbg("Failed to request RESET GPIO. rc = %d\n", rc);
+		return -EPERM;
 	}
-	gpio_direction_output(gf_dev->reset_gpio, 1);
+	#endif
 
-	gf_dev->irq_gpio = of_get_named_gpio(np, "fp-gpio-irq", 0);
-	if (gf_dev->irq_gpio < 0) {
-		pr_err("falied to get irq gpio!\n");
-		return gf_dev->irq_gpio;
+	/*get irq resourece*/
+	rc = gf3208_request_named_gpio(gf_dev, "goodix,gpio_irq", &gf_dev->irq_gpio);
+	if (rc) {
+		gf_dbg("Failed to request IRQ GPIO. rc = %d\n", rc);
+		return -EPERM;
 	}
 
-	rc = devm_gpio_request(dev, gf_dev->irq_gpio, "goodix_irq");
-	if (rc) {
-		pr_err("failed to request irq gpio, rc = %d\n", rc);
-		goto err_irq;
+
+#ifdef ENABLE_PINCTRL
+	gf_dev->fingerprint_pinctrl = devm_pinctrl_get(&gf_dev->spi->dev);
+	for (i = 0; i < ARRAY_SIZE(gf_dev->pinctrl_state); i++) {
+		const char *n = pctl_names[i];
+		struct pinctrl_state *state =
+			pinctrl_lookup_state(gf_dev->fingerprint_pinctrl, n);
+		if (IS_ERR(state)) {
+			pr_err("cannot find '%s'\n", n);
+			rc = -EINVAL;
+		}
+		pr_info("found pin control %s\n", n);
+		gf_dev->pinctrl_state[i] = state;
 	}
-	gpio_direction_input(gf_dev->irq_gpio);
 
-err_irq:
-	devm_gpio_free(dev, gf_dev->reset_gpio);
-err_reset:
+	rc = select_pin_ctl(gf_dev, "goodixfp_reset_active");
+	if (rc)
+		goto exit;
+	rc = select_pin_ctl(gf_dev, "goodixfp_irq_active");
+	if (rc)
+		goto exit;
+#endif
+	pr_warn("--------gf_parse_dts end---OK.--------\n");
+
+#ifdef ENABLE_PINCTRL
+exit:
+#endif
 	return rc;
+
+
 }
 
 void gf_cleanup(struct gf_dev *gf_dev)
 {
-	pr_info("[info] %s\n", __func__);
+	gf_dbg("[info]  enter%s\n", __func__);
 
 	if (gpio_is_valid(gf_dev->irq_gpio)) {
-		gpio_free(gf_dev->irq_gpio);
-		pr_info("remove irq_gpio success\n");
+
+		devm_gpio_free(&gf_dev->spi->dev, gf_dev->irq_gpio);
+		gf_dbg("remove irq_gpio success\n");
 	}
+
 	if (gpio_is_valid(gf_dev->reset_gpio)) {
-		gpio_free(gf_dev->reset_gpio);
-		pr_info("remove reset_gpio success\n");
+
+		devm_gpio_free(&gf_dev->spi->dev, gf_dev->reset_gpio);
+		gf_dbg("remove reset_gpio success\n");
+	}
+
+#ifdef ENABLE_PINCTRL
+	if (gf_dev->fingerprint_pinctrl != NULL) {
+		devm_pinctrl_put(gf_dev->fingerprint_pinctrl);
+		gf_dev->fingerprint_pinctrl = NULL;
+
+		gf_dbg("gx  fingerprint_pinctrl  release success\n");
 	}
+#endif
 }
 
+/*power management*/
 int gf_power_on(struct gf_dev *gf_dev)
 {
 	int rc = 0;
+	msleep(10);
+	pr_info("---- power on ok ----\n");
 
-	/* TODO: add your power control here */
 	return rc;
 }
 
 int gf_power_off(struct gf_dev *gf_dev)
 {
 	int rc = 0;
+	pr_info("---- power off ----\n");
+	return rc;
+}
 
-	/* TODO: add your power control here */
+static int hw_reset(struct  gf_dev *gf_dev)
+{
+	int irq_gpio;
+	struct device *dev = &gf_dev->spi->dev;
 
+#ifdef ENABLE_PINCTRL
+	int rc = select_pin_ctl(gf_dev, "goodixfp_reset_reset");
+	if (rc)
+		goto exit;
+	mdelay(3);
+
+	rc = select_pin_ctl(gf_dev, "goodixfp_reset_active");
+	if (rc)
+		goto exit;
+#else
+	int rc = 0;
+#endif
+
+	irq_gpio = gpio_get_value(gf_dev->irq_gpio);
+	dev_info(dev, "IRQ after reset %d\n", irq_gpio);
+#ifdef ENABLE_PINCTRL
+exit:
+#endif
 	return rc;
 }
 
+
+/********************************************************************
+ *CPU output low level in RST pin to reset GF. This is the MUST action for GF.
+ *Take care of this function. IO Pin driver strength / glitch and so on.
+ ********************************************************************/
 int gf_hw_reset(struct gf_dev *gf_dev, unsigned int delay_ms)
 {
 	if (gf_dev == NULL) {
 		pr_info("Input buff is NULL.\n");
-		return -EINVAL;
+		return -EPERM;
 	}
+	#if defined (CONFIG_MACH_XIAOMI_SAKURA) || defined (CONFIG_MACH_XIAOMI_DAISY)
 	gpio_direction_output(gf_dev->reset_gpio, 1);
 	gpio_set_value(gf_dev->reset_gpio, 0);
 	mdelay(3);
 	gpio_set_value(gf_dev->reset_gpio, 1);
+	#else
+	hw_reset(gf_dev);
 	mdelay(delay_ms);
+	#endif
 	return 0;
 }
 
@@ -107,7 +228,7 @@ int gf_irq_num(struct gf_dev *gf_dev)
 {
 	if (gf_dev == NULL) {
 		pr_info("Input buff is NULL.\n");
-		return -EINVAL;
+		return -EPERM;
 	} else {
 		return gpio_to_irq(gf_dev->irq_gpio);
 	}
